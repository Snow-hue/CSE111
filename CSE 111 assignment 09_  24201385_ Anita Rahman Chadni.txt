// TASK 01

class Pokemon {
    public String name;
    
    public Pokemon(String name) {
        this.name = name;
    }
    public void attack() {
        System.out.println("Pikachu attacks with a basic move! ");
    }
    public void attack(String power) {
        System.out.println("Pikachu uses " + power + "! ");
    }
    public void attack(String power,int force) {
        System.out.println("Pokemon uses " + power + " with power " + force + "!"); 
    }
}


// TASK 02 


// MANGO

class Mango extends Fruit{
    public Boolean formalin;
    
    public Mango() {
        super(true, "Mango");
    }
    
    // toString
    @Override
    public String toString() {
        if(hasFormalin()) {
        return "Mangos are bad for you ";
        }
        else {
            return "Mangos are good for you ";
        }
    }
}

// Jackfruit

class Jackfruit extends Fruit {
    
    public Jackfruit() {
        super(false, "Jackfruit");
    }
    
    // toString
    @Override
    public String toString() {
        if(hasFormalin()) {
        return "Jackfruits are bad for you ";
        }
        else {
            return "Jackfruits are good for you ";
        }
    }
}


// TASK 03

  // CSEStudent
  class CSEStudent extends Student {

      public String msg = "I want to transfer to CSE ";
      
      @Override 
      public String shout(){
            return msg;
          }
  }
  
  // CSE111Student
  class CSE111Student extends Student {
 
      public String msg = "I love Java Programming ";
      
      @Override 
      public String shout(){
            return msg;
          }
  }


// TASK 04

 // my code
 // Platinum Card 
class PlatinumCard extends CreditCard {
    public PlatinumCard(String name, String accountNo){
        super(name, accountNo, 100);
    }

    public void spendCash(int money){
        int prevPoints = rewardPoints;
        while (money >= 100){
            money -= 100;
            rewardPoints += 2;
        }
        System.out.println("Previous Reward Points: " + prevPoints);
        System.out.println("Reward points after spending 200 taka: " + rewardPoints);
    }
}

 // SIGNATURE CARD
class SignatureCard extends CreditCard {
    public SignatureCard(String name, String accountNo){
        super(name, accountNo, 200);
    }

    public void spendCash(int money){
        int prevPoints = rewardPoints;
        while (money >= 100){
            money -= 100;
            rewardPoints += 4;
        }
        System.out.println("Previous Reward Points: " + prevPoints);
        System.out.println("Reward points after spending 500 taka: " + rewardPoints);
    }

    @Override
    public void cardDetails(){
        super.cardDetails();
        System.out.println("Possible Number of Companions for Lounge: 5");
    }
}
 

// TASK 05

class Character {
  public String name;
  public int level;
  
  public Character(String name, int level) {
    this.name = name;
    this.level = level;
  }
  
  public void specialMove() {
    System.out.println("Character uses a generic move.");
  }
  
  // Override the .equals() method
  @Override 
  public boolean equals(Object obj) {
      if(this == obj) {
          return true;
      } 
      if(obj == null || getClass() != obj.getClass()) {
          return false;
      }
          Character other = (Character) obj;
         return this.name.equals(other.name) && this.level == other.level;

  }
}

// Warrior class
class Warrior extends Character {
    // constructor
    public Warrior(String name, int level) {
        super(name, level);
    }
    
    @Override
    public void specialMove() {
        System.out.println(name + " performs a heavy sword slash! ");
    }
}

// Mage class
class Mage extends Character {
    // constructor
    public Mage(String name, int level) {
        super(name, level);
    }
    
    @Override
    public void specialMove() {
        System.out.println(name + " casts a powerful fireball! ");
    }
}

// class Paladin -warriot 
class Paladin extends Warrior {
    // constructor
    public Paladin(String name, int level) {
        super(name, level);
    }
    
    @Override
    public void specialMove() {
        System.out.println(name + " unleashes a holy strike! ");
    }
}


// TASK 06

// my code
//Car class
class Car extends Vehicle {
    public String model;
    public int doors;
    public int wheels;
    public boolean ai;
    
    // constructor
    public Car(String brand, String model, int year, int doors, int wheels, boolean ai) {
        super(brand, year);
        this.model = model;
        this.doors = doors;
        this.wheels = wheels;
        this.ai = ai;
    }
    // startAutoPilot() method
    public void startAutoPilot() {
        if(ai) {
            System.out.println(this.getBrand() + ":" + this.model + " AutoPilot Started ");
        } 
        else {
            System.out.println(this.getBrand() + ":" + this.model + " has NO AutoPilot ");
        }
    }
    
    // toString() method - overriden
    @Override
    public String toString() {
        return "Car Brand: "+ this.getBrand() + 
            ", Year: " + this.getYear() + 
            ", Wheels: " + this.wheels +
            ", Model: " + this.model + 
            ", Doors: " + this.doors +
            ", AI: " + this.ai;
    }
}

// Bike class
class Bike extends Vehicle {
    public String model;
    public int wheels;
    public boolean sideCar;
    
    // constructor
    public Bike(String brand, String model, int year, int wheels, boolean sideCar) {
        super(brand, year);
        this.model = model;
        this.wheels = wheels;
        this.sideCar = sideCar;
    }
    // doAWheelie() method
    public void doAWheelie() {
        if(sideCar) {
            System.out.println("Wheelie Failed. " + this.getBrand() + ":" + this.model +
                               " has SideCar ");
        }
        else {
            System.out.println( this.getBrand() + ":" + this.model + " is doing Wheelie!! ");
        }
    }
    // toString() method - overriden
    @Override
    public String toString() {
        return "Bike Brand: "+ this.getBrand() + 
            ", Year: " + this.getYear() + 
            ", Wheels: " + this.wheels +
            ", Model: " + this.model + 
            ", SideCar: " + this.sideCar;
    }
}

// Garage class

class Garage {
     public Car[] cars;
     public Bike[] bikes;
     public int carIndex;
     public int bikeIndex;
    
    public Garage(int carCapacity, int bikeCapacity) {
        System.out.println("Welcome to the Garage!");
        System.out.println("Car Capacity: " + carCapacity);
        System.out.println("Bike Capacity: " + bikeCapacity);
        cars = new Car[carCapacity];
        bikes = new Bike[bikeCapacity];
    }
    // addVehicle(vC1) method
    public void addVehicle(Vehicle v) {
        if(v instanceof Car) {
            if(carIndex < cars.length) {
                cars[carIndex++] = (Car) v;
                System.out.println("A " + ((Car) v).getBrand() + " CAR has been added to the Garage ");
            }
            else {
                System.out.println("Can't add more Cars! Capacity: 2 ");
            }
        }
         if(v instanceof Bike) {
            if(bikeIndex < bikes.length) {
                bikes[bikeIndex++] = (Bike) v;
                System.out.println("A " + ((Bike) v).getBrand() + " BIKE has been added to the Garage ");
            }
            else {
                System.out.println("Can't add more bikes! Capacity: 3");
            }
        }
    }
}