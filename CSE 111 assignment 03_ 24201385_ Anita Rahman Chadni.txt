// TASK 01

class BankAccount {
    public int accountNumber = 0;
    public String accType = "Not set";
    
    public void setInfo(int n, String type) { 
        if(accountNumber != n || !accType.equals(type)) {
            System.out.println("Account information updated!");
        }
        this.accountNumber = n;
        this.accType = type;
    }
        public String printDetails() {
            return "Account no: " + accountNumber + "\nType: " + accType;
            
        }
    }


// TASK 02 


class Shape {
    public String name;
    public double area;
    
    // for circle
    
    public void setParameters(String name, double radius) {
        this.name = name;
        this.area = Math.PI * radius * radius;
        
    } 
    // for traingle and rectangle
    
    public void setParameters(String name, double len, double wid) {
        this.name = name;
        if(name.equalsIgnoreCase("traingle")) {
            this.area = 0.5 * len * wid;
        } else {
            this.area = len * wid;
        }
        
    }
    
    // print details
    
    public String details() {
        return "Shape Name: " + name + "\nArea: " + String.format("%.2f", area);
            
    }
}



// TASK 03



class Shelf{
    public int capacity = 0;
    public int totalBooks = 0;
    
    // print details
    
    public void showDetails() {
        System.out.println("Shelf Capacity: " + this.capacity);
        System.out.println("Number of Books: " + this.totalBooks);
    }
    
    // set details and process 
    
    public void addBooks(int number) {
        if(capacity == 0) {
            System.out.println("Zero capacity. Cannot add books.");
        } else if(totalBooks + number > capacity) {
            System.out.println("Exceeds capacity");
        } else {
            totalBooks += number;
           System.out.println(totalBooks + " books added to shelf"); 
        }
    }
}



// TASK 04


class Student { 
    
    // initialize
    
    public String name = "Not Set";
    public String department = "CSE";
    public double cgpa = 0.0;
    public int credits = 9;
    public String scholarshipStatus = "Not Set";
    
    // print
    
    public void showDetails() {
        System.out.println("Name: " + this.name);
        System.out.println("Department: " + this.department);
        System.out.println("CGPA: " + this.cgpa);
        System.out.println("Credits: " + this.credits);
        System.out.println("Scholarship Status: " + this.scholarshipStatus);
    }
    
    // update info
    
    public void updateDetails(String name, double cgpa, int credits) {
        this.name = name;
        this.cgpa = cgpa;
        this.credits = credits;
    }
    
     public void updateDetails(String name, double cgpa) {
        this.name = name;
        this.cgpa = cgpa;
    }
    
      public void updateDetails(String name, double cgpa, int credits, String department) {
        this.name = name;
        this.cgpa = cgpa;
        this.credits = credits;
        this.department = department;
    }
    // checks for scholarship eligibility
    
    public void checkScholarshipEligibility() {
        if(credits > 10) {
            if(cgpa >= 3.7) {
                System.out.println(this.name + " is eligible for Merit based scholarship");
                this.scholarshipStatus = "Merit based scholarship";
            } else if(cgpa >= 3.5 && cgpa <= 3.7) {
                System.out.println(this.name + " is eligible for Need based scholarship");
                this.scholarshipStatus = "Need based scholarship";
            } else {
                System.out.println(this.name + " is not eligible for scholarship");
                this.scholarshipStatus = "No Scholarship";
            }
        } else {
            System.out.println(this.name + " is not eligible for scholarship");
            this.scholarshipStatus = "No Scholarship";
        }
    }
}


// TASK 05


class Library {
    
    // initialiaze
    
    public int maxCapacity = 0;
    public int totalBooks = 0;
    public String[] library;
    
    // set capacity
    
    public void setBookCapacity(int n) {
        this.maxCapacity = n;
        this.library = new String[n];
    }
    
    // adding books to library
    
    public void addBook(String name) {
        if(totalBooks >= maxCapacity) {
            System.out.println("Exceeds maximum capacity. You can't add more than " + maxCapacity + " books.");
            return; // stops execution if limit reached
        }
        
       library[totalBooks] = name;
       totalBooks++;
           System.out.println("Book '" + name + "' added to library");
    }
    
    // print 
    
    public void printDetail() {
        System.out.println("Maximum capacity: " + maxCapacity);
        System.out.println("Total books: " + totalBooks);
        System.out.println("Book List: ");
        for (int i = 0; i < totalBooks; i++) { // iterates over actual books
            System.out.println(library[i]);
        }
    }
}



// TASK 06


class TaxiLagbe {
    public String taxiNumber;
    public String areaName;
    public int totalPassengers = 0;
    public String[] lists;
    public int totalFare = 0;
    public int maxPPL = 4;
    // store information
    public void storeInfo(String s, String a) {
        this.taxiNumber = s;
        this.areaName = a; 
        this.lists = new String[maxPPL];
    }

    // Add passenger
    
    public void addPassenger(String name, int fare) {
        if (totalPassengers >= maxPPL) {
            System.out.println("Taxi Full! No more passengers can be added");
            return;
        }
        lists[totalPassengers] = name;  // Store name in the array
        totalFare += fare;  
        totalPassengers++;  // Increase count by one
        System.out.println("Dear " + name + "! Welcome to TaxiLagbe");
    }

    
    public void addPassenger(String name1, int fare1, String name2, int fare2) {
        addPassenger(name1, fare1); // calling first method as a shortcut lolol
        addPassenger(name2, fare2); 
    }

    // Print Taxi Details
    
    public void printDetails() {
        System.out.println("Taxi number: " + taxiNumber);
        System.out.println("This taxi can cover " + areaName + " area.");
        System.out.println("Total Passenger: " + totalPassengers);
        System.out.print("Passenger Lists: ");
        for (int i = 0; i < totalPassengers; i++) {
            System.out.print(lists[i] + " ");
        }
        System.out.println("Total collected fare: " + totalFare + " Taka");
    }
}


// TASK 07


class Cart {
    public int cartNumber = 0;
    public String[] itemName;
    public double[] itemPrice;
    public double discount = 0.0;
    public int itemCount = 0;
    public int max = 3;
    
    // initialize
    
    public Cart() {
        this.itemName = new String[max];
        this.itemPrice = new double[max];
    }
    
    // creating cart
    
    public void create_cart(int n) {
        this.cartNumber = n;
    }
    
    // adding items in the cart
    
    public void addItem(String name, double price) {
        if(itemCount >= max) {
            System.out.println("You already have " + max + "items in your cart.");
            return;
        }
        itemName[itemCount] = name;
        itemPrice[itemCount] = price;
        itemCount++;
        System.out.println(name + " added to " + cartNumber);
        System.out.println("You have " + itemCount + "item(s) in your cart now");
    }
    
    // parameters exchange
    
    public void addItem(double price, String name) {
        addItem(name, price);
    }
    
    // print
    
    public void cartDetails() {
        System.out.println("Your cart (c" + cartNumber +"): ");
        double totalPrice = 0.0;
        for(int i = 0; i < itemCount; i++) {
            System.out.println(itemName[i] + " - " + itemPrice[i]);
            totalPrice += itemPrice[i];
        }
        
        System.out.println("Discount applied: " + discount + " %");
        
        // calcution with discount 
        
        totalPrice -= totalPrice * (discount / 100);
        
        System.out.println("Total price: " + totalPrice);
    }
    
    // discount taking
    
    public void giveDiscount(int n) {
        this.discount = n;
    }
}


// TASK 08



class Reader {
    public String name;
    public int capacity;
    public String[] books;
    public int bookCount;

    public Reader() {
        this.name = "New user";
        this.capacity = 0;
        this.books = new String[capacity]; 
        this.bookCount = 0;
    }

    // Creates new reader
    
    public String createReader(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
        this.books = new String[capacity];
        return "A new reader is created!";
    }

    // Adds a book to the reader's collection
    
    public void addBook(String bookName) {
        if (bookCount < capacity) {
            books[bookCount] = bookName;
            bookCount++;
        } else {
            System.out.println("No more capacity");
        }
    }

    // Print
    
    public void readerInfo() {
        System.out.println("Name: " + name);
        System.out.println("Capacity: " + capacity);
        System.out.println("Books: ");

        if (bookCount == 0) {
            System.out.println("No books added yet");
        } else {
            for (int i = 0; i < bookCount; i++) {
                System.out.println("Book " + (i + 1) + ": " + books[i]);
            }
        }
    }
}

