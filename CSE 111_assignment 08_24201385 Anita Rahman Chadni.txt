// TASK 01

 // inherited class 1
 
 class BBAStudent extends Student {
     BBAStudent() {
         setName("Default");
         setDepartment("BBA");
     }
     BBAStudent(String n) {
         setName(n);
         setDepartment("BBA");
     }
 }


// TASK 02

// inherited class 1

class CheckingAccount extends Account {
  public static int count;
  
  CheckingAccount() {
      super(0.0);
      count++;
  }
  CheckingAccount(double b) {
      super(b);
      count++;
  }
}


// TASK 03


// inherited class 1(dog)

class Dog extends Animal {
    public String breed;
    Dog(String n, int age, String color, String breed) {
        super(n, age, color);
        this.breed = breed;
    }
        @Override
        public String info() {
            return "Name: " + name + "\nAge: " + age + "\nColor: " + color + "\nBreed: " + breed;
        }
        @Override
        public void makeSound() {
            System.out.println(color + " color " + name + " is barking");
        }
    
}

// inherited class 2(cat)

class Cat extends Animal {
    public String breed;
    Cat(String n, int age, String color, String breed) {
        super(n, age, color);
        this.breed = breed;
    }
        @Override
        public String info() {
            return "Name: " + name + "\nAge: " + age + "\nColor: " + color + "\nBreed: " + breed;
        }
        @Override
    public void makeSound() {
            System.out.println(color + " color " + name + " is meowing");
        }
}


// TASK 04


// inherited class 1

class Vehicle2010 extends Vehicle {
    public void moveLowerLeft() {
        moveDown();
        moveLeft();
    }
    public void moveUpperRight() {
        moveUp();
        moveRight();
    }
    public void moveLowerRight() {
        moveDown();
        moveRight();
    }
}


// TASK 05


//my code
    
    class ComplexNumber extends RealNumber {
        public double imaginary = 1.0;
        
        public ComplexNumber() {
            super(1.0);
        }
            @Override
            public String toString() {
              return "RealPart: " + realValue + " \nImaginaryPart: " + imaginary + " ";
              }

        public ComplexNumber(double r, double i) {
            super(r);
            this.imaginary = i;
        }
    }


// TASK 06


// MANAGER CLASS

class Manager extends Employee {
    private double bonus;  
    private double finalSalary;

    public Manager(String n, double base, int hours, double bonus) {
        super(n, base, hours);
        this.bonus = bonus;
    }

    public void calculateSalary() {
        if (getHoursWorked() > 40) {
            double bonusAmount = getBaseSalary() * (bonus / 100);
            finalSalary = getBaseSalary() + bonusAmount;
        } else {
            finalSalary = getBaseSalary();
        }
    }

    public void requestIncrement(double amount) {
        if (getHoursWorked() > 100) {
            setBaseSalary(getBaseSalary() + amount);
            System.out.println("$" + (int) amount + " Increment approved.");
        } else if (getHoursWorked() > 80) {
            setBaseSalary(getBaseSalary() + (amount / 2));
            System.out.println("$" + (int) (amount / 2) + " Increment approved.");
        } else {
            System.out.println("Increment denied.");
        }
    }

    @Override
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Base Salary: $" + getBaseSalary());
        System.out.println("Work Hours: " + getHoursWorked());

        if (getHoursWorked() > 40) {
            System.out.println("Bonus: " + bonus + " %");
        } else {
            System.out.println("Bonus: 0.0 %");
        }

        System.out.println("Final Salary: $" + finalSalary);
    }
}

// DEVELOPER
class Developer extends Employee {
    private String language;
    private double finalSalary;

    public Developer(String n, double base, int work, String lang) {
        super(n, base, work);
        this.language = lang;
    }

    public void calculateSalary() {
        finalSalary = getBaseSalary();
        if (language.equalsIgnoreCase("Java")) {
            finalSalary += 700;
        }
    }

    @Override
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Base Salary: $" + getBaseSalary());
        System.out.println("Work Hours: " + getHoursWorked());
        System.out.println("Language: " + language);
        System.out.println("Final Salary: $" + finalSalary);
    }
}


// TASK 07

 // my code
 // cinemex class
class CinemexTicket extends MovieTicket {
    private static int ticketCount = 0;
    private String genre;
    private String seatType;
    private String status;
    private String ticketID;

    // Const 1: Seat default = Regular
    public CinemexTicket(String movie, String showtime, String genre, String date) {
        super(movie, date, showtime, 0.0);
        this.genre = genre;
        this.seatType = "Regular";
        this.status = "Not Paid";
        ticketCount++;
        this.ticketID = movie + "-" + seatType.charAt(0) + "-" + ticketCount;
        this.seat = seatType;  // from parent class
    }
     
     // Constructor 2: Seat type provided
    public CinemexTicket(String movie, String showtime, String genre, String date, String seatType) {
        super(movie, date, showtime, 0.0);
        this.genre = genre;
        this.seatType = seatType;
        this.status = "Not Paid";
        ticketCount++;
        this.ticketID = movie + "-" + seatType.charAt(0) + "-" + ticketCount;
        this.seat = seatType;
    }

    public static int getTotalTickets() {
        return ticketCount;
    }

    public void calculateTicketPrice() {
        double basePrice = 0.0;
        for (int i = 0; i < seatTypes.length; i++) {
            if (seatTypes[i].equals(seatType)) {
                basePrice = seatPrices[i];
                break;
            }
        }

        // Check for night show (between 18:00 and 23:00)
        String[] timeParts = showtime.split(":");
        int hour = Integer.parseInt(timeParts[0]);
        if (hour >= 18 && hour < 23) {
            basePrice += (basePrice * nightShowCharge / 100.0);
        }

        setPrice(basePrice);
        System.out.println("Ticket price is calculated successfully.");
    }

    public String confirmPayment() {
        if (status.equals("Paid")) {
            return "Ticket price is already paid!";
        } else {
            status = "Paid";
            return "Payment Successful.";
        }
    }

    @Override
    public String toString() {
        return "Ticket ID: " + ticketID + "\n"
             + super.toString() + "\n"
             + "Genre: " + genre + "\n"
             + "Seat Type: " + seatType + "\n"
             + "Price(tk): " + getPrice() + "\n"
             + "Status: " + status;
    }
}


// TASK 08

// KKTEA
 
class KKTea extends Tea {
    public int teabags;
    public static int totalSales = 0;
    public static int regularTea = 0;

    public KKTea(int price, int teabags) {
        super("KK Regular Tea", price);
        this.teabags = teabags;
    }

    @Override
    public void productDetail() {
        super.productDetail();
        System.out.println("Weight: " + (teabags * 2) + ", Tea Bags: " + teabags);
    }

    public static void updateSoldStatusRegular(Tea tea) {
        if (!tea.status) {
            tea.status = true;
            totalSales++;
            regularTea++;
        }
    }

    public static void totalSales() {
        System.out.println("Total Sales: " + totalSales);
        System.out.println("KK Regular Tea: " + regularTea);
    }
}

// KKFLAVORED

class KKFlavouredTea extends KKTea {
    private static int flavouredTea = 0;

    public KKFlavouredTea(String flavour, int price, int teabags) {
        super(price, teabags);
        this.name = "KK " + flavour + " Tea";
    }

    public static void updateSoldStatusFlavoured(KKFlavouredTea tea) {
        if (!tea.status) {
            tea.status = true;
            totalSales++;
            flavouredTea++;
        }
    }

    @Override
    public void productDetail() {
        super.productDetail();
    }

    public static void totalSales() {
        System.out.println("Total Sales: " + totalSales);
        System.out.println("KK Regular Tea: " + regularTea);
        System.out.println("KK Flavoured Tea: " + flavouredTea);
    }
}